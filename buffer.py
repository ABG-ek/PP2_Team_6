import os
import shutil
import numpy as np
from database import Product
from peewee import IntegrityError


class Buffer():
    def __init__(self):
        self.title = None 
        self.plu_code = None
        self.price_per_kg = None 
        self.card_image = None 
        self.mean_embedding = None 
        self.count = None 
        self.catalog_mode = None
        self.base_embedding = None  # –û—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –ë–î
        self.session_embeddings = []  # –í–µ–∫—Ç–æ—Ä—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏

        self.result = []
    
    
    def clear(self):
        self.title = None 
        self.plu_code = None
        self.price_per_kg = None 
        self.card_image = None 
        self.mean_embedding = None 
        self.count = None
        self.catalog_mode = None
        self.session_count = 0
        self.base_embedding = None
        self.session_embeddings = []
        self.result = []
        print("–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞...")

    def update_embedding(self, new_embedding: np.ndarray):
        self.session_embeddings.append(new_embedding)

        if self.base_embedding is not None and self.count:
            total_count = self.count + len(self.session_embeddings)
            weighted_base = self.base_embedding * self.count
            weighted_session = np.sum(self.session_embeddings, axis=0)
            self.mean_embedding = (weighted_base + weighted_session) / total_count
        else:
            self.mean_embedding = np.mean(self.session_embeddings, axis=0)


    def load_from_db_by_plu(self, plu_code):
        product = Product.select().where(Product.plu_code == plu_code).first()
        if not product:
            print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å PLU {plu_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False

        self.title = product.title
        self.plu_code = product.plu_code
        self.price_per_kg = product.price_per_kg
        self.card_image = product.card_image

        self.base_embedding = product.get_vector()
        self.mean_embedding = self.base_embedding.copy()
        self.session_embeddings = []
        self.count = product.count

        print(f"üì• –ë—É—Ñ–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î: {self.title} (PLU: {self.plu_code})")
        return True


    def delete_from_db_by_plu(self, plu_code):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ PLU, –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –æ—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä."""
        product = Product.select().where(Product.plu_code == plu_code).first()
        if not product:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç —Å PLU: {plu_code}")
            return False

        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = product.card_image
        if image_path and os.path.exists(image_path):
            try:
                os.remove(image_path)
                print(f"üñº –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        else:
            print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç.")

        product.delete_instance()
        print(f"üóë –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω: {product.title} (PLU: {plu_code})")

        if self.plu_code == plu_code:
            self.clear()

        return True


    def save_to_db(self):
        if not all([self.title, self.plu_code, self.price_per_kg]):
            print("‚ùå –ë—É—Ñ–µ—Ä –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π
        dest_dir = "assets/card_images"
        os.makedirs(dest_dir, exist_ok=True)
        new_filename = f"{self.plu_code}.png"
        dest_path = os.path.join(dest_dir, new_filename)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ snapshot.png
        if os.path.exists("snapshot.png"):
            try:
                shutil.move("snapshot.png", dest_path)
                self.card_image = dest_path
                print(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {dest_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª snapshot.png –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

        try:
            product = Product.select().where(Product.plu_code == self.plu_code).first()

            if product:
                print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç: {product.title} (PLU: {product.plu_code})")
                product.title = self.title
                product.price_per_kg = self.price_per_kg
                product.card_image = self.card_image

                # –î–æ–æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏
                if self.session_embeddings:
                    product.update_with(self.mean_embedding, weight=len(self.session_embeddings))
                    print(f"üß† –î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(self.session_embeddings)} –Ω–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤.")
                else:
                    product.save()
                    print("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥–æ–æ–±—É—á–µ–Ω–∏—è.")

            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ title
                if Product.select().where(Product.title == self.title).exists():
                    print(f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ '{self.title}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Ç–æ–≤–∞—Ä–æ–º.")
                    return

                if not self.session_embeddings:
                    print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ –æ–±—É—á–∞—é—â–∏—Ö —Å–Ω–∏–º–∫–æ–≤.")
                    return

                print(f"‚ûï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {self.title} (PLU: {self.plu_code})")
                Product.create(
                    title=self.title,
                    plu_code=self.plu_code,
                    price_per_kg=self.price_per_kg,
                    card_image=self.card_image,
                    mean_embedding=self.mean_embedding.astype(np.float32).tobytes(),
                    count=len(self.session_embeddings)
                )
                print(f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–Ω–∏–º–∫–æ–≤: {len(self.session_embeddings)}")

            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º session-–¥–∞–Ω–Ω—ã–µ
            self.base_embedding = self.mean_embedding.copy()
            self.session_embeddings = []

        except IntegrityError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å): {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")